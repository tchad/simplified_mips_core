 0: dot_product: addu $r1 $r0 $r0 ; result = 0
 4: loop:        beq $r7 $r0 done ; done looping?
 8:              lw $r2 0($r3) ; load a elem
12:              lw $r4 0($r5) ; load b elem
16:              mul $r2 $r2 $r4 ; assume this is 1 instr.
20:              addu $r1 $r1 $r2 ; result += (*a) * (*b)
24:              addiu $r3 $r3 #4
28:              addiu $r5 $r5 #4
32:              addiu $r7 $r7 #-1
36:              j loop
40: done:        jr $r31
44:              nop
48:              nop
52:              nop
56:              hlt
60:              nop
64:              nop

r3 = 0
r5 = 9
r7 = 9
r31 = 56

 0: 000000 00000 00000 00001 00000 100001
 4: 000100 00111 00000 0000000000001000
 8: 100011 00011 00010 0000000000000000
12: 100011 00101 00100 0000000000000000 
16: 000000 00010 00100 00010 00000 011000
20: 000000 00001 00010 00001 00000 100001
24: 001001 00011 00011 0000000000000100
28: 001001 00101 00101 0000000000000100
32: 001001 00111 00111 1111111111111111
36: 000010 00000000000000000000000001
40: 000000 11111 00000 00000 00000 001000 
44: 111111 00000 00000 0000000000000000
48: 111111 00000 00000 0000000000000000
52: 111111 00000 00000 0000000000000000
56: 011111 00000 00000 0000000000000000
60: 111111 00000 00000 0000000000000000
64: 111111 00000 00000 0000000000000000

data:

 0: 0
 1: 1
 2: 1
 3: 8
 4: 1
 5: 9
 6: 3
 7: 6
 8: 6
 9: 2
10: 3
11: 3
12: 0
13: 3
14: 1
15: 5
16: 8
17: 8

Expected result in r1= 129

